# .github/workflows/deploy.yml
name: Deploy WooCommerce

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

  ansible:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Run Ansible playbook
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > woocommerce-key.pem
          chmod 600 woocommerce-key.pem
          
          # Make sure the directories exist
          mkdir -p ansible/woocommerce-deploy
          
          # Create inventory.ini if it doesn't exist
          if [ ! -f ansible/woocommerce-deploy/inventory.ini ]; then
            echo "[ec2]" > ansible/woocommerce-deploy/inventory.ini
            echo "$(terraform -chdir=terraform output -raw ec2_public_ip) ansible_user=ec2-user ansible_ssh_private_key_file=../woocommerce-key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> ansible/woocommerce-deploy/inventory.ini
          fi
          
          # Run the playbook from woocommerce-deploy directory
          cd ansible/woocommerce-deploy
          
          ansible-playbook -i inventory.ini woocommerce-playbook.yml \
            -e "db_name=${{ secrets.DB_NAME }}" \
            -e "db_user=${{ secrets.DB_USER }}" \
            -e "db_password=${{ secrets.DB_PASSWORD }}" \
            -e "db_host=${{ secrets.DB_HOST }}" \
            --private-key=../../woocommerce-key.pem
