name: Deploy WooCommerce

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'

jobs:
  backend_init:
    name: 'Initialize Terraform Backend'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Check and create backend infrastructure if needed
      run: |
        # Check if the S3 bucket exists
        if ! aws s3api head-bucket --bucket woocommerce-gitops-terraform-state 2>/dev/null; then
          echo "Creating Terraform backend infrastructure..."
          cd backend-setup
          terraform init
          terraform apply -auto-approve
          cd ..
        else
          echo "Backend infrastructure already exists."
        fi

  terraform:
    name: 'Terraform'
    needs: backend_init
    runs-on: ubuntu-latest
    environment: production
    outputs:
      ec2_public_ip: ${{ steps.get_outputs.outputs.ec2_public_ip }}
      rds_endpoint: ${{ steps.get_outputs.outputs.rds_endpoint }}
      
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve -input=false -var="db_name=${{ secrets.DB_NAME }}" -var="db_username=${{ secrets.DB_USER }}" -var="db_password=${{ secrets.DB_PASSWORD }}"

    - name: Get EC2 IP and RDS Endpoint
      id: get_outputs
      run: |
        # Strip new lines
        EC2_IP=$(terraform output -raw ec2_public_ip)
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
        
        # Check if we got valid values
        if [[ -z "$EC2_IP" ]]; then
          echo "Failed to extract EC2 IP address"
          exit 1
        fi
        
        if [[ -z "$RDS_ENDPOINT" ]]; then
          echo "Failed to extract RDS endpoint"
          exit 1
        fi
        
        # Set GitHub Actions outputs
        echo "ec2_public_ip=${EC2_IP}" >> $GITHUB_OUTPUT
        echo "rds_endpoint=${RDS_ENDPOINT}" >> $GITHUB_OUTPUT
        
        # Print for verification
        echo "EC2 Public IP: ${EC2_IP}"
        echo "RDS Endpoint: ${RDS_ENDPOINT}"

  ansible:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Extract RDS host from endpoint
        id: rds_host
        run: |
          RDS_ENDPOINT="${{ needs.terraform.outputs.rds_endpoint }}"
          RDS_HOST="${RDS_ENDPOINT%%:*}"
          echo "RDS_HOST=${RDS_HOST}" >> $GITHUB_OUTPUT

      - name: Run Ansible playbook
        run: |
          WORKSPACE="${GITHUB_WORKSPACE}"
          
          # Create SSH key with full path
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ${WORKSPACE}/woocommerce-key.pem
          chmod 600 ${WORKSPACE}/woocommerce-key.pem
          
          # Make sure the directories exist
          mkdir -p ansible/woocommerce-deploy
          
          # Create inventory.ini with the EC2 public IP from Terraform output
          echo "[ec2]" > ansible/woocommerce-deploy/inventory.ini
          echo "${{ needs.terraform.outputs.ec2_public_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=${WORKSPACE}/woocommerce-key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> ansible/woocommerce-deploy/inventory.ini
          
          # Add a delay to ensure EC2 is fully initialized
          echo "Waiting for EC2 instance to initialize fully..."
          sleep 30
          
          # Decide which playbook to use - use either the dedicated playbook or the one in playbooks directory
          if [ -s ansible/woocommerce-deploy/woocommerce-playbook.yml ]; then
            PLAYBOOK="ansible/woocommerce-deploy/woocommerce-playbook.yml"
          elif [ -s ansible/playbooks/deploy.yml ]; then
            PLAYBOOK="ansible/playbooks/deploy.yml"
            # Ensure the inventory is properly set
            cp ansible/woocommerce-deploy/inventory.ini ansible/inventory/
          else
            echo "No valid playbook found! Exiting."
            exit 1
          fi
          
          ansible-playbook -i ansible/woocommerce-deploy/inventory.ini ${PLAYBOOK} \
            -e "db_name=${{ secrets.DB_NAME }}" \
            -e "db_user=${{ secrets.DB_USER }}" \
            -e "db_password=${{ secrets.DB_PASSWORD }}" \
            -e "db_host=${{ steps.rds_host.outputs.RDS_HOST }}" \
            --private-key=${WORKSPACE}/woocommerce-key.pem
          
          echo "WooCommerce deployment completed. Site available at: http://${{ needs.terraform.outputs.ec2_public_ip }}/wordpress"