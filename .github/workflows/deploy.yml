name: Deploy WooCommerce

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'

jobs:
  backend_init:
    name: 'Initialize Terraform Backend'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Check and create backend infrastructure if needed
      run: |
        # Check if the S3 bucket exists
        if ! aws s3api head-bucket --bucket woocommerce-gitops-terraform-state 2>/dev/null; then
          echo "Creating Terraform backend infrastructure..."
          cd backend-setup
          terraform init
          terraform apply -auto-approve
          cd ..
        else
          echo "Backend infrastructure already exists."
        fi

  deploy:
    name: 'Deploy Infrastructure and Application'
    needs: backend_init
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.4
        terraform_wrapper: true

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Terraform Format
      id: fmt
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Validate
      id: validate
      working-directory: ./terraform
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      working-directory: ./terraform
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve -input=false -var="db_name=${{ secrets.DB_NAME }}" -var="db_username=${{ secrets.DB_USER }}" -var="db_password=${{ secrets.DB_PASSWORD }}"

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./terraform
      id: terraform_outputs
      run: |
        EC2_IP=$(terraform output -raw ec2_public_ip)
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
        
        # Check if we got valid values
        if [[ -z "$EC2_IP" ]]; then
          echo "Failed to extract EC2 IP address"
          exit 1
        fi
        
        if [[ -z "$RDS_ENDPOINT" ]]; then
          echo "Failed to extract RDS endpoint"
          exit 1
        fi
        
        # Set as environment variables for subsequent steps
        echo "EC2_PUBLIC_IP=${EC2_IP}" >> $GITHUB_ENV
        echo "RDS_ENDPOINT=${RDS_ENDPOINT}" >> $GITHUB_ENV
        echo "RDS_HOST=$(echo ${RDS_ENDPOINT} | cut -d':' -f1)" >> $GITHUB_ENV
        
        # Print for verification
        echo "EC2 Public IP: ${EC2_IP}"
        echo "RDS Endpoint: ${RDS_ENDPOINT}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Ansible dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3

    - name: Create SSH key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > woocommerce-key.pem
        chmod 600 woocommerce-key.pem

    - name: Create Ansible inventory
      run: |
        mkdir -p ansible/woocommerce-deploy
        
        # Create inventory.ini with the EC2 public IP
        echo "[ec2]" > ansible/woocommerce-deploy/inventory.ini
        echo "${{ env.EC2_PUBLIC_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=${GITHUB_WORKSPACE}/woocommerce-key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> ansible/woocommerce-deploy/inventory.ini
        
        # Add a delay to ensure EC2 is fully initialized
        echo "Waiting for EC2 instance to initialize fully..."
        sleep 30

    - name: Run Ansible playbook
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        # Decide which playbook to use
        if [ -s ansible/woocommerce-deploy/woocommerce-playbook.yml ]; then
          PLAYBOOK="ansible/woocommerce-deploy/woocommerce-playbook.yml"
        elif [ -s ansible/playbooks/deploy.yml ]; then
          PLAYBOOK="ansible/playbooks/deploy.yml"
          # Ensure the inventory is properly set
          cp ansible/woocommerce-deploy/inventory.ini ansible/inventory/
        else
          echo "No valid playbook found! Exiting."
          exit 1
        fi
        
        ansible-playbook -i ansible/woocommerce-deploy/inventory.ini ${PLAYBOOK} \
          -e "db_name=${{ secrets.DB_NAME }}" \
          -e "db_user=${{ secrets.DB_USER }}" \
          -e "db_password=${{ secrets.DB_PASSWORD }}" \
          -e "db_host=${{ env.RDS_ENDPOINT }}" \
          --private-key=${GITHUB_WORKSPACE}/woocommerce-key.pem

    - name: Apply Wordpress fixes
      run: |
        # Run the wordpress-fix.yml playbook
        ansible-playbook -i ansible/woocommerce-deploy/inventory.ini ansible/woocommerce-deploy/wordpress-fix.yml \
          -e "db_name=${{ secrets.DB_NAME }}" \
          -e "db_user=${{ secrets.DB_USER }}" \
          -e "db_password=${{ secrets.DB_PASSWORD }}" \
          -e "db_host=${{ env.RDS_ENDPOINT }}" \
          --private-key=${GITHUB_WORKSPACE}/woocommerce-key.pem  

    - name: Check if WordPress is accessible
      run: |
        # Check if WordPress is accessible
        if curl -s --head "http://${{ env.EC2_PUBLIC_IP }}/wordpress" | grep "200 OK" > /dev/null; then
          echo "WordPress is accessible!"
        else
          echo "WordPress is not accessible! exting..."
          exit 1
        fi

    - name: Print deployment information
      run: |
        echo "------------------------------------------------------------"
        echo "DEPLOYMENT INFORMATION:"
        echo "------------------------------------------------------------"
        echo "WordPress URL: http://${{ env.EC2_PUBLIC_IP }}/wordpress"
        echo "DB Test URL: http://${{ env.EC2_PUBLIC_IP }}/wordpress/db-test.php"
        echo "EC2 Instance IP: ${{ env.EC2_PUBLIC_IP }}"
        echo "RDS Endpoint: ${{ env.RDS_ENDPOINT }}"
        echo "------------------------------------------------------------"
        echo "Deployment completed successfully!"
        echo "WooCommerce deployment completed. Site available at: http://${{ env.EC2_PUBLIC_IP }}/wordpress"